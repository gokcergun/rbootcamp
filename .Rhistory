.6*4100
25/9
?plot.lm ## help page for the method function
## "plot()" example
methods(plot)
plot.methods <- methods(plot)
length(plot.methods)
## note that packages also contain methods functions
library(mgcv)
plot.methods.with.mgcv <- methods(plot)
length(plot.methods.with.mgcv)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
setdiff(plot.methods.with.mgcv,
plot.methods)
plot.methods.with.mgcv <- methods(plot)
length(plot.methods.with.mgcv)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
## a simple example
my.mean <- function(x){
N <- length(x)
Sum <- sum(x)
computed.mean <- Sum / N
return(computed.mean)
}
library(mgcv)
plot.methods.with.mgcv <- methods(plot)
length(plot.methods.with.mgcv)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
plot.methods <- methods(plot)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
methods(plot)
plot.methods <- methods(plot)
length(plot.methods)
## help pages
?plot    ## help page of the generic function
?plot.lm ## help page for the method function
## note that packages also contain methods functions
library(mgcv)
plot.methods.with.mgcv <- methods(plot)
length(plot.methods.with.mgcv)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
## "plot()" example
methods(plot)
plot.methods <- methods(plot)
length(plot.methods)
## help pages
?plot    ## help page of the generic function
?plot.lm ## help page for the method function
## note that packages also contain methods functions
library(mgcv)
plot.methods.with.mgcv <- methods(plot)
length(plot.methods.with.mgcv)
## finding the methods
setdiff(plot.methods.with.mgcv,
plot.methods)
## how many missing values?
length(is.na(airquality$Ozone))
## how many missing values?
sum(is.na(airquality$Ozone))
## setting NAs
airquality$Ozone[1:5]
airquality$Ozone[1] <- NA
airquality$Ozone[1:5]
## OR
is.na(airquality$Ozone) <- c(2,4)
airquality$Ozone[1:5]
#install.packages('dplyr')
library(dplyr)
#install.package('lubridate')
library(lubridate)
df_trees <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
View(df_trees)
df_trees <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
str(df_trees)
#install.packages('dplyr')
library(dplyr)
#install.package('lubridate')
library(lubridate)
library(tidyr)
df_trees <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
str(df_trees)
class(df_trees$legal_status)
dtype(df_trees$legal_status)
is.factor(df_trees$legal_status)
df_trees$legal_status <- as.factor(df_trees$legal_status)
df_trees$legal_status <- as.factor(df_trees$legal_status)
is.factor(df_trees$legal_status)
for (colname in colnames(df_trees)){
if (is.character(colname)) {
df_trees[[colname]]<-as.factor(df_trees[[colname]])
}
}
str(df_trees)
df_trees <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
df_trees[[colname]]<-as.factor(df_trees[[colname]])
}
}
str(df_trees)
df_trees_orig <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
df_trees <- df_trees_orig
str(df_trees)
is.character(df_trees$dbh)
is.character(df_trees$species)
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
print(colname)
}
}
for (colname in colnames(df_trees)){
if (is.character(colname)) {
print(colname)
}
}
for (colname in colnames(df_trees)){
if (is.character(colname) == FALSE) {
print(colname)
}
}
for (colname in colnames(df_trees)){
if (is.character(colname) is TRUE) {
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
df_trees[[colname]]<-as.factor(df_trees[[colname]])
}
}
df_trees <- df_trees_orig
str(df_trees)
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
print(colname)
}
}
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
print(colname)
}
}
for (colname in colnames(df_trees)){
if (is.character(colname) == TRUE) {
print(class(colname))
}
}
for (i in 1:12){
if (is.character(df_trees[[i]]) == TRUE) {
df_trees[[i]]<-as.factor(df_trees[[i]])
}
}
str(df_trees)
for (col in colnames(df_trees)){
print(paste(col, "=", mean(complete.cases(df_trees[[col]]))))
}
for (col in colnames(df_trees)){
print(paste(col, '=', sum(is.na(df_trees[[col]]))/length(is.na(df_trees[[col]]))))
}
for (col in colnames(df_trees)){
print(paste(col, "=", mean(is.na(df_trees[[col]]))))
}
View(df_trees)
df_trees[is.na(df_trees$date)]
is.na(df_trees$date)
sum(is.na(df_trees$date))
sum(is.na(df_trees$date))/length(is.na(df_trees$date))
df_trees[[is.na(df_trees$date)]
df_trees[[is.na(df_trees$date)]
df_trees[[is.na(df_trees$date)]]
## Column "Ozone"
anyNA(airquality$Ozone)
is.na(airquality$Ozone)
which(is.na(airquality$Ozone))
which(is.na(df_trees$date))
head(which(is.na(df_trees$date)))
df_trees[head(which(is.na(df_trees$date)))]
df_trees[which(is.na(df_trees$date))]
df_trees[which(is.na(df_trees$date)),]
df_trees[which(is.na(df_trees$date)), 'date']
df_trees %>%
select(c(date, tree_id, species)) %>%
df_trees[which(is.na(df_trees$date)),]
df_trees %>%
select(c(date, tree_id, species)) %>%
df_trees %>%
select(c(date, tree_id, species))
df_trees %>%
select(c(date, tree_id, species)) %$%
which(is.na(date))
#install.packages('dplyr')
library(dplyr)
#install.package('lubridate')
library(lubridate)
#install.package('tidyr')
library(tidyr)
df_trees %>%
select(c(date, tree_id, species)) %$%
which(is.na(date))
df_trees %>%
select(c(date, tree_id, species)) %>%
which(is.na(date))
df_trees %>%
is.na(date)
df_trees %>%
select(date)
df_trees %>%
select(date) %>% is.na()
df_trees %>%
select(date) %>% is.na() %>% df_trees[]
df_trees %>% filter(is.na(date)) %>%
select(c(date, species))
df_na_date <- df_trees %>% filter(is.na(date)) %>%
select(c(date, species))
df_na_date <- df_trees %>% filter(is.na(date)) %>%
select(c(date, species))
table(df_na_date$species)
df_na_date <- df_trees %>% filter(is.na(date)) %>%
select(c(date, species))
length(unique(df_na_date$species))
View(airquality)
df_trees$date <- as.date(df_trees$date,format="%Y-%m-%d")
df_trees$date <- as.Date(df_trees$date,format="%Y-%m-%d")
class(df_trees$date)
df_trees$year <- year(df_trees$date) ## year function is from lubridate package
df_trees %>%
select(year)%>%
arrange() %>%
head()
df_trees %>%
select(year)%>%
arrange() %>%
hist()
df_trees %>%
select(year)%>%
arrange(year) %>%
hist()
df_trees %>%
select(year)%>%
arrange() %>%
hist(year)
library(ggplot)
library(ggplot2)
df_trees %>%
select(year)%>%
arrange() %>%
ggplot()+geom_histogram()
df_trees %>%
select(year)%>%
arrange() %>%
ggplot(year)+geom_histogram()
df_trees %>%
select(year)%>%
arrange() %>%
hist(year)
df_trees %>%
select(year)%>%
hist(year)
df_trees$year <- as.numeric(year(df_trees$date)) ## year function is from lubridate package
df_trees %>%
select(year)%>%
hist(year)
class(df_trees$year)
df_trees %>%
select(year)%>%
hist()
df_trees %>%
select(year)%$%
hist()
hist(df_trees$year)
df_trees %>%
select(year)%>%
arrange() %>%
head()
df_trees$year <- year(df_trees$date) ## year function is from lubridate package
class(df_trees$year)
hist(df_trees$year)
date()
date(year)
date('year')
?date()
?date
df_trees <- df_trees %>%
mutate(age = 2021-year )
hist(df_trees$age)
df_trees <- df_trees %>%
mutate(age = year(Sys.Date())-year)
hist(df_trees$age)
df_trees <- df_trees %>%
mutate(age = 2021-year)
hist(df_trees$age)
df_trees <- df_trees %>%
mutate(age = year(Sys.Date())-year)
hist(df_trees$age)
hist(df_trees$age, main = 'Tree Age Distribution', xlab = 'Age', col = 'cyanblue')
hist(df_trees$age, main = 'Tree Age Distribution', xlab = 'Age', col = 'royalblue')
hist(df_trees$age, main = 'Tree Age Distribution', xlab = 'Age', col = 'royalblue2')
length(unique(df_trees$species))
