icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/pixelkit/flat-jewels/512/Tree-icon.png',
iconSize = c(30, 30)
),
popup = df_trees_rare$species_lat,
label = df_trees_rare$species_lat)
#radius = 4,
#fillOpacity = .5)
runApp('GitHub/rbootcamp')
#map center
mlong = -122.4446
mlat  = 37.72
rare_species_vec <- unique(df_trees_rare$species_lat)
pal <- colorFactor('Paired', domain = rare_species_vec)
leaflet(data = df_trees_rare,
width = '100%', height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addMarkers(lng = df_trees_rare$longitude,
lat = df_trees_rare$latitude,
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/matthew-kelleigh/mac-town-vol2/32/Tree-1-icon.png',
#'https://icons.iconarchive.com/icons/pixelkit/flat-jewels/512/Tree-icon.png',
iconSize = c(30, 30)
),
popup = df_trees_rare$species_lat,
label = df_trees_rare$species_lat)
#radius = 4,
#fillOpacity = .5)
#map center
mlong = -122.4446
mlat  = 37.72
rare_species_vec <- unique(df_trees_rare$species_lat)
pal <- colorFactor('Paired', domain = rare_species_vec)
leaflet(data = df_trees_rare,
width = '100%', height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addMarkers(lng = df_trees_rare$longitude,
lat = df_trees_rare$latitude,
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/aha-soft/agriculture/256/tree-icon.png',
#'https://icons.iconarchive.com/icons/pixelkit/flat-jewels/512/Tree-icon.png',
iconSize = c(30, 30)
),
popup = df_trees_rare$species_lat,
label = df_trees_rare$species_lat)
#radius = 4,
#fillOpacity = .5)
#map center
mlong = -122.4446
mlat  = 37.72
rare_species_vec <- unique(df_trees_rare$species_lat)
pal <- colorFactor('Paired', domain = rare_species_vec)
leaflet(data = df_trees_rare,
width = '100%', height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addMarkers(lng = df_trees_rare$longitude,
lat = df_trees_rare$latitude,
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/matthew-kelleigh/mac-town-vol2/32/Tree-1-icon.png',
#'https://icons.iconarchive.com/icons/pixelkit/flat-jewels/512/Tree-icon.png',
iconSize = c(30, 30)
),
popup = df_trees_rare$species_lat,
label = df_trees_rare$species_lat)
#radius = 4,
#fillOpacity = .5)
unique(rare_species_vec)
staticplot = ggplot(df_trees_hasdate_formated, aes(rank, group = species_first,
fill = as.factor(species_first), color = as.factor(species_first))) +
geom_tile(aes(y = n/2,
height = n,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(species_first, " ")), vjust = 0.2, hjust = 1) +
geom_text(aes(y=n, label = n, hjust=0)) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = staticplot + transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Total Number of Planted Trees per Year: {closest_state}',
subtitle  =  "Top 10 Species")
anim = staticplot + transformr::transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Total Number of Planted Trees per Year: {closest_state}',
subtitle  =  "Top 10 Species")
anim = staticplot + transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'Total Number of Planted Trees per Year: {closest_state}',
subtitle  =  "Top 10 Species")
library(transformr)
?labs
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum')
#install.packages('dplyr')
library(dplyr)
#install.packages('lubridate')
library(lubridate)
#install.packages('tidyr')
library(tidyr)
#install.packages('ggplot2')
library(ggplot2)
library(tidyverse)
#install.packages('gganimate')
library(gganimate)
#install.packages('gifski')
library(gifski)
#install.packages('av')
library(av)
#install.packages('ggmap')
library(ggmap)
#install.packages('shiny')
library(shiny)
#install.packages('leaflet')
library(leaflet)
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
?labels
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum', legend = 'Top 5 Species')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme_minimal(legend.title = 'Top 5 Species', base_size = 22)
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme(legend.title = 'Top 5 Species') +
theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum') +
theme(legend.title = 'Top 5 Species')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + theme(legend.title = 'Top 5 Species')
theme_minimal(base_size = 22)
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + theme(legend.title = 'Top 5 Species') +
theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + guide_legend(title = 'Top 5 Species') +
theme_minimal(base_size = 22)
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) + guide(guide_legend(title = 'Top 5 Species')) +
theme_minimal(base_size = 22)
?guide_legend
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme_minimal(base_size = 22) + guide_legend(title = 'Top 5 Species')
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum', colour = 'Top 5 Species')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
species_cumsum <- ggplot(df_top5_cumsum, aes(x=year,y=csum, group=species_first, col=factor(species_first))) + geom_line() + scale_color_manual(values = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00')) +
theme_minimal(base_size = 22)
anim2 <- species_cumsum + transition_reveal(year) + view_follow(fixed_x = TRUE)  +
labs(title = 'Cumulative Total of Top 5 Species over Time', x = 'Year', y = 'Cumulative Sum', colour = 'Top 5 Species')
animate(anim2, 200, fps = 5,  width = 1200, height = 1000,
renderer = gifski_renderer("gganim2.gif"))
df_trees_recommended %>%
select(c('species_nor', 'longitude', 'lattitude'))
recommended_sp <- c(' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum', ' Flowering Cherry',
' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush', ' Hybrid Strawberry Tree',
' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm', ' Fruitless Olive', ' Chilean Soapbark',
" Small-leaf Tristania 'Elegant'", ' Chinese Pistache', ' Trident Maple', ' Chinese Elm', ' Cork Oak',
' Ginkgo: Autumn Gold', ' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
)
unique(df_trees[grep(df_trees$species_nor, pattern = "Ginkgo", ignore.case = TRUE), 'species'])
df_trees$species_nor <- as.factor(df_trees$species_nor)
df_trees_recommended <- df_trees %>%
filter(species_nor %in% recommended_sp) %>%
select(c("species_nor", 'latitude', "longitude"))
unique(df_trees_recommended$species_nor)
df_trees_recommended %>%
summarise(max_lon = max(longitude,  na.rm=TRUE), min_lon = min(longitude,  na.rm=TRUE),
max_lat = max(latitude,  na.rm=TRUE), min_lat = min(latitude,  na.rm=TRUE))
#map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
leaflet(data = df_trees_recommended,
width = '100%',
height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = df_trees_recommended$longitude,
lat = df_trees_recommended$latitude,
color = ~pal(df_trees_recommended$species_nor),
popup = df_trees_recommended$species_nor,
label = df_trees_recommended$species_nor,
radius = 4) %>%
addLayersControl(overlayGroups = df_trees_recommended$species_nor) ## add layers control
unique(df_trees[grep(df_trees$species_nor, pattern = "Bronze Loquat", ignore.case = TRUE), 'species'])
length(df_trees[grep(df_trees$species_nor, pattern = "Bronze Loquat", ignore.case = TRUE), 'species'])
length(df_trees[grep(df_trees$species_nor, pattern = "Peppermint Willow", ignore.case = TRUE), 'species'])
unique(df_trees[grep(df_trees$species_nor, pattern = "Peppermint Willow", ignore.case = TRUE), 'species'])
runApp('GitHub/rbootcamp')
df_trees_recommended <- df_trees_recommended %>%
mutate(size = case_when(species_nor %in% small_trees ~ small,
species_nor %in% medium_trees ~ medium,
species_nor %in% large_trees ~ large))
small_trees <- c(' Trident Maple', ' Weeping Bottlebrush', ' Mediterranean Fan Palm', ' Bronze Loquat', ' Little Gem Magnolia',
' Flowering Cherry')
medium_trees <- c(' Hybrid Strawberry Tree', " Small-leaf Tristania 'Elegant'", ' Peppermint Willow', ' Japanese Blueberry Tree',
' Flaxleaf Paperbark', ' Fruitless Olive', ' Chinese Pistache', ' Red Flowering Gum', ' Primrose Tree')
large_trees <- c(' Brisbane Box', ' Southern Magnolia', ' Cork Oak', ' Chilean Soapbark', ' Ginkgo: Autumn Gold',
' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo', ' Chinese Elm')
df_trees_recommended <- df_trees_recommended %>%
mutate(size = case_when(species_nor %in% small_trees ~ small,
species_nor %in% medium_trees ~ medium,
species_nor %in% large_trees ~ large))
df_trees_recommended <- df_trees_recommended %>%
mutate(size = case_when(species_nor %in% small_trees ~ 'small',
species_nor %in% medium_trees ~ 'medium',
species_nor %in% large_trees ~ 'large'))
head(df_trees_recommended)
str(df_trees_recommended)
str(trees)
str(df_trees)
df_trees_recommended <- df_trees %>%
filter(species_nor %in% recommended_sp) %>%
select(c("species_nor", 'latitude', "longitude", 'dbh', 'age'))
df_trees_recommended <- df_trees %>%
filter(species_nor %in% recommended_sp) %>%
select(c("species_nor", 'latitude', "longitude", 'dbh', 'age'))
unique(df_trees_recommended$species_nor)
df_trees_recommended %>%
summarise(max_lon = max(longitude,  na.rm=TRUE), min_lon = min(longitude,  na.rm=TRUE),
max_lat = max(latitude,  na.rm=TRUE), min_lat = min(latitude,  na.rm=TRUE))
#map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
leaflet(data = df_trees_recommended,
width = '100%',
height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = df_trees_recommended$longitude,
lat = df_trees_recommended$latitude,
color = ~pal(df_trees_recommended$species_nor),
popup = df_trees_recommended$species_nor,
label = df_trees_recommended$species_nor,
radius = 4) %>%
addLayersControl(overlayGroups = df_trees_recommended$species_nor) ## add layers control
small_trees <- c(' Trident Maple', ' Weeping Bottlebrush', ' Mediterranean Fan Palm', ' Bronze Loquat', ' Little Gem Magnolia',
' Flowering Cherry')
medium_trees <- c(' Hybrid Strawberry Tree', " Small-leaf Tristania 'Elegant'", ' Peppermint Willow', ' Japanese Blueberry Tree',
' Flaxleaf Paperbark', ' Fruitless Olive', ' Chinese Pistache', ' Red Flowering Gum', ' Primrose Tree')
large_trees <- c(' Brisbane Box', ' Southern Magnolia', ' Cork Oak', ' Chilean Soapbark', ' Ginkgo: Autumn Gold',
' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo', ' Chinese Elm')
df_trees_recommended <- df_trees_recommended %>%
mutate(size = case_when(species_nor %in% small_trees ~ 'small',
species_nor %in% medium_trees ~ 'medium',
species_nor %in% large_trees ~ 'large'))
df_trees_recommended %>%
filter(age != NA) %>% dim()
df_trees_recommended %>%
filter(age != 'NA') %>% dim()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh, col = size)) + geom_points()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh, col = size)) + geom_point()
df_trees_recommended <- df_trees %>%
filter(species_nor %in% recommended_sp) %>%
select(c("species_nor", 'latitude', "longitude", 'dbh', 'age'))
small_trees <- c(' Trident Maple', ' Weeping Bottlebrush', ' Mediterranean Fan Palm', ' Bronze Loquat', ' Little Gem Magnolia',
' Flowering Cherry')
medium_trees <- c(' Hybrid Strawberry Tree', " Small-leaf Tristania 'Elegant'", ' Peppermint Willow', ' Japanese Blueberry Tree',
' Flaxleaf Paperbark', ' Fruitless Olive', ' Chinese Pistache', ' Red Flowering Gum', ' Primrose Tree')
large_trees <- c(' Brisbane Box', ' Southern Magnolia', ' Cork Oak', ' Chilean Soapbark', ' Ginkgo: Autumn Gold',
' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo', ' Chinese Elm')
df_trees_recommended <- df_trees_recommended %>%
mutate(height = case_when(species_nor %in% small_trees ~ 'small',
species_nor %in% medium_trees ~ 'medium',
species_nor %in% large_trees ~ 'large'))
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh, col = height)) + geom_point()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh, col = height)) + geom_line()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + geom_point() + facet_wrap(.~height)
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + geom_point() + facet_wrap(.~height) + smooth()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + smooth() + facet_wrap(.~height)
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + geom_point() + facet_wrap(.~height) +geom_smooth()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh, col =species_nor)) + geom_point() + facet_wrap(.~height) +geom_smooth()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + geom_point() + facet_wrap(.~height) + geom_smooth()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + lab(x = 'Age', y = 'Diameter at breast height')
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + lab(x = 'Age', y = 'Diameter at breast height') +
geom_point() + facet_wrap(.~height) + geom_smooth() + theme_minimal()
df_trees_recommended %>%
filter(age != 'NA') %>%
ggplot(aes(x = age, y = dbh)) + labs(x = 'Age', y = 'Diameter at breast height') +
geom_point() + facet_wrap(.~height) + geom_smooth() + theme_minimal()
library(mgcv)
gam.1 <- gam(dbh ~ s(age) + height, data = df_trees_recommended)
summary(gam.1)
library(mgcv)
gam.1 <- gam(dbh ~ s(age) * height, data = df_trees_recommended)
library(mgcv)
gam.1 <- gam(dbh ~ s(age) + height, data = df_trees_recommended)
summary(gam.1)
shiny::runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
pal <- colorFactor('xmen', domain = unique(df_trees_recommended$height))
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp')
library(shiny); runApp('GitHub/rbootcamp/App2.R')
runApp('GitHub/rbootcamp/App2.R')
runApp('GitHub/rbootcamp/App2.R')
runApp('GitHub/rbootcamp/App2.R')
runApp('GitHub/rbootcamp/App2.R')
runApp('GitHub/rbootcamp')
runApp('GitHub/rbootcamp/App2.R')
?geom_line
?ggplot
ggplot
getwd()
library(rsconnect)
deployApp("C:/Users/gokce/Documents/GitHub/rbootcamp")
runApp('GitHub/rbootcamp')
deployApp("C:/Users/gokce/Documents/GitHub/rbootcamp")
library(lubridate)
?ymd
?leaflet
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
#install.packages('tidyr')
library(tidyr)
?transition_states
library(assert)
?assert
library(patchwork)
install.packages('patchwork')
?sessionInfo
library('patchwork')
?`patchwork-package`
?packrat
library(packrat)
packrat?
d
?packrat
getwd()
library(shiny)
deployApp('C:/Users/gokce/Documents/GitHub/rbootcamp/Ergün_Garzon')
library(shiny)
?deployApp
deployApp('C:/Users/gokce/Documents/GitHub/rbootcamp/Ergün_Garzon')
deployApp("C:/Users/gokce/Documents/GitHub/rbootcam/Erguen_Garzon")
deployApp("C:/Users/gokce/Documents/GitHub/rbootcam/Erguen_Garzon")
library(rsconnect)
deployApp("C:/Users/gokce/Documents/GitHub/rbootcam/Erguen_Garzon")
deployApp("~/GitHub/rbootcam/Erguen_Garzon")
deployApp("~/GitHub/rbootcamp/Erguen_Garzon")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
#install.packages('dplyr')
library(dplyr)
#install.packages('lubridate')
library(lubridate)
#install.packages('tidyr')
library(tidyr)
#install.packages('ggplot2')
library(ggplot2)
library(tidyverse)
#install.packages('gganimate')
library(gganimate)
#install.packages('gifski')
library(gifski)
#install.packages('av')
library(av)
#install.packages('shiny')
library(shiny)
#install.packages('leaflet')
library(leaflet)
library(mgcv)
df_trees_orig <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
df_trees <- df_trees_orig
str(df_trees)
for (i in 1:12){
if (is.character(df_trees[,i]) == TRUE) {
df_trees[,i]<-as.factor(df_trees[,i])
}
}
str(df_trees)
# df_trees$date <- as.Date(df_trees$date,format="%Y-%m-%d") #using base r
df_trees$date <- lubridate::ymd(df_trees$date) #using lubridate
# df_trees$year <- format(df_trees$date, "%Y")  #using base r
df_trees$year <- year(df_trees$date) # using lubridate
class(df_trees$year)
head(unique(df_trees$species))
df_trees <- df_trees %>%
separate(species, sep = "::", remove = FALSE, into = c('species_lat', 'species_nor'))
head(df_trees[,c('species','species_lat','species_nor')])
for (col in colnames(df_trees)){
print(paste(col, "=", mean(is.na(df_trees[[col]])))) #mean takes percentage here because adds up all TRUES (since their value is 1)
#and divides by total number of values (TRUE + FALSE)
}
df_trees %>% filter(is.na(date))%>%
select(species)%>%
unique() %>% dim()
df_trees_datena <- df_trees %>% filter(is.na(date)) %>%
count(species)
df_trees_species_count <- df_trees %>% count(species)
df_trees_merge <- dplyr::left_join(df_trees_species_count, df_trees_datena, by="species", suffix = c("total", "date.na"))
df_trees_merge$percent.missing <- df_trees_merge$ndate.na / df_trees_merge$ntotal
df_trees_merge %>%
arrange(desc(ntotal), desc(percent.missing)) %>%
head()
str(df_trees_datena)
df_trees_datena <- df_trees %>% filter(is.na(date)) %>%
count(species)
df_trees_species_count <- df_trees %>% count(species)
df_trees_merge <- dplyr::left_join(df_trees_species_count, df_trees_datena, by="species", suffix = c("total", "date.na"))
df_trees_merge$percent.missing <- df_trees_merge$ndate.na / df_trees_merge$ntotal
df_trees_merge %>%
arrange(desc(ntotal), desc(percent.missing)) %>%
head()
dim(df_trees_datena)
df_trees %>% filter(is.na(date))%>%length
df_trees %>% filter(is.na(date))
df_trees %>% filter(!is.na(date))
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
?Paired
paired.pal
Paired.pal
library(RColorBrewer)
Paired.pal
brewer.pal('Paired')
brewer.pal(Paired)
?brewer.pal
?brewer.pal(10, 'paired')
brewer.pal(10, 'paired')
brewer.pal(10, 'Paired')
brewer.pal(20, 'Paired')
brewer.pal(12, 'Paired')
brewer.pal(13, 'Paired')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
?fluidPage
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
runApp('GitHub/rbootcamp/Trialapp.R')
