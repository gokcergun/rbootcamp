```
but map is too chaotic given large number of species...sooo Shiny to the rescue:
Create a shiny app version of the map above, with a check-box to look at each species at a time.
```{r}
#map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
shinyApp(
# Define the UI
ui = fluidPage(
# App title
titlePanel("Recommended Tree Species of San Francisco"),
#tabPanel(a(href='https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf', 'Source')),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
checkboxGroupInput(inputId = "species", #name of the input, widget
label = "Choose a species:",
choices = c('All Species',  ' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum',
' Flowering Cherry', ' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush',
' Hybrid Strawberry Tree', ' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm',
' Fruitless Olive', ' Chilean Soapbark', " Small-leaf Tristania 'Elegant'", ' Chinese Pistache',
' Trident Maple', ' Chinese Elm', ' Cork Oak', ' Ginkgo: Autumn Gold', ' Fairmont Ginkgo',
' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
),
selected = ' Japanese Blueberry Tree'
)),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
leafletOutput("map", height = 800)
)
)
),
# Define the server
server = function(input, output) {
filteredData <- reactive({
if (input$species == "All Species") {
df_trees_recommended
} else {
filter(df_trees_recommended, species_nor == input$species)
}
})
output$map <- renderLeaflet({
leaflet(filteredData(),
width = '100%',
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = filteredData()$longitude,
lat = filteredData()$latitude,
popup = filteredData()$species_nor,
color = ~pal(filteredData()$species_nor),
label = ~species_nor,
radius = 4,
fillOpacity = 0.99)
})
},
options = list(height = 800)
)
```
#Analysis 3:
- another map with rare (n=1) species
create list of rare species with name matching original df_trees
```{r}
species_rare <-  df_trees_species_count%>%
filter(n == 1) %>%
separate(species, sep = "::", remove = FALSE, into = c('species_lat', 'species_nor'))
```
use list of rare species to subset original df_trees and also group them by common first name (i.e family name) to reduce species number
```{r}
df_trees_rare <- df_trees %>%
filter(species_nor %in% species_rare$species_nor) %>%
separate(species_lat, sep = " ", remove = FALSE, into = c('species_first', 'species_second', 'species_third'))
```
plot map using leaflet, to create a hover-over dot pop up with species name, given not enough colors to differentiate so many species
```{r}
#map center
mlong = -122.4446
mlat  = 37.72
rare_species_vec <- unique(df_trees_rare$species_lat)
pal <- colorFactor('Paired', domain = rare_species_vec)
leaflet(data = df_trees_rare,
width = '100%', height = 800,
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = df_trees_rare$longitude,
lat = df_trees_rare$latitude,
popup = df_trees_rare$species_lat,
label = df_trees_rare$species_lat,
radius = 4,
fillOpacity = .5)
```
# Libraries that are used
library(lubridate)
library(tidyverse)
library(shiny)
library(leaflet)
library(data.table)
##read data
sf_trees <- fread("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv",
select = c("species", 'latitude', "longitude"))
##Separate the species column into latin and common name columns.
sf_trees <- sf_trees %>%
separate(species, sep = "::", remove = FALSE, into = c('species_lat', 'species_nor'))
sf_trees$species_nor <- as.factor(df_trees$species_nor)
##map of recommended species per  (https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf) :
recommended_sp <- c(' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum', ' Flowering Cherry',
' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush', ' Hybrid Strawberry Tree',
' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm', ' Fruitless Olive', ' Chilean Soapbark',
" Small-leaf Tristania 'Elegant'", ' Chinese Pistache', ' Trident Maple', ' Chinese Elm', ' Cork Oak',
' Ginkgo: Autumn Gold', ' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
)
df_trees_recommended <- sf_trees %>%
filter(species_nor %in% recommended_sp)
##map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
##Define the UI
ui = fluidPage(
titlePanel("Recommended Tree Species of San Francisco"),  ##App title
#tabPanel(a(href='https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf', 'Source')),
sidebarLayout(          ##Sidebar layout with input and output definitions
sidebarPanel(         ##Sidebar panel for input
checkboxGroupInput(inputId = "species", #name of the input, widget
label = "Choose a species:",
choices = c('All Species',  ' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum',
' Flowering Cherry', ' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush',
' Hybrid Strawberry Tree', ' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm',
' Fruitless Olive', ' Chilean Soapbark', " Small-leaf Tristania 'Elegant'", ' Chinese Pistache',
' Trident Maple', ' Chinese Elm', ' Cork Oak', ' Ginkgo: Autumn Gold', ' Fairmont Ginkgo',
' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
),
selected = ' Japanese Blueberry Tree'
)),
mainPanel(             ##Main panel for displaying outputs
tags$style(type = "text/css",                   ##Hide errors
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
leafletOutput("map", height = 800)    ##Output: interactive leaflet map
)
)
)
server = function(input, output) {        ##Define the server
filteredData <- reactive({
if (input$species == "All Species") {
df_trees_filtered
} else {
filter(df_trees_filtered, species_nor == input$species)
}
})
output$map <- renderLeaflet({
leaflet(filteredData(),
width = '100%',
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = filteredData()$longitude,
lat = filteredData()$latitude,
popup = filteredData()$species_nor,
color = ~pal(filteredData()$species_nor),
label = ~species_nor,
radius = 4,
fillOpacity = 0.99)
})
}
shinyApp(ui, server)
# Libraries that are used
library(lubridate)
library(tidyverse)
library(shiny)
library(leaflet)
library(data.table)
##read data
sf_trees <- fread("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv",
select = c("species", 'latitude', "longitude"))
##Separate the species column into latin and common name columns.
sf_trees <- sf_trees %>%
separate(species, sep = "::", remove = FALSE, into = c('species_lat', 'species_nor'))
sf_trees$species_nor <- as.factor(df_trees$species_nor)
##map of recommended species per  (https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf) :
recommended_sp <- c(' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum', ' Flowering Cherry',
' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush', ' Hybrid Strawberry Tree',
' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm', ' Fruitless Olive', ' Chilean Soapbark',
" Small-leaf Tristania 'Elegant'", ' Chinese Pistache', ' Trident Maple', ' Chinese Elm', ' Cork Oak',
' Ginkgo: Autumn Gold', ' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
)
df_trees_recommended <- sf_trees %>%
filter(species_nor %in% recommended_sp)
##map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
##Define the UI
ui = fluidPage(
titlePanel("Recommended Tree Species of San Francisco"),  ##App title
#tabPanel(a(href='https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf', 'Source')),
sidebarLayout(          ##Sidebar layout with input and output definitions
sidebarPanel(         ##Sidebar panel for input
checkboxGroupInput(inputId = "species", #name of the input, widget
label = "Choose a species:",
choices = c('All Species',  ' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum',
' Flowering Cherry', ' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush',
' Hybrid Strawberry Tree', ' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm',
' Fruitless Olive', ' Chilean Soapbark', " Small-leaf Tristania 'Elegant'", ' Chinese Pistache',
' Trident Maple', ' Chinese Elm', ' Cork Oak', ' Ginkgo: Autumn Gold', ' Fairmont Ginkgo',
' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
),
selected = ' Japanese Blueberry Tree'
)),
mainPanel(             ##Main panel for displaying outputs
tags$style(type = "text/css",                   ##Hide errors
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
leafletOutput("map", height = 800)    ##Output: interactive leaflet map
)
)
)
server = function(input, output) {        ##Define the server
filteredData <- reactive({
if (input$species == "All Species") {
df_trees_filtered
} else {
filter(df_trees_filtered, species_nor == input$species)
}
})
output$map <- renderLeaflet({
leaflet(filteredData(),
width = '100%',
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = filteredData()$longitude,
lat = filteredData()$latitude,
popup = filteredData()$species_nor,
color = ~pal(filteredData()$species_nor),
label = ~species_nor,
radius = 4,
fillOpacity = 0.99)
})
}
shinyApp(ui, server)
filter(df_trees_recommended, species_nor == input$species)
# Libraries that are used
library(lubridate)
library(tidyverse)
library(shiny)
library(leaflet)
library(data.table)
##read data
sf_trees <- fread("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv",
select = c("species", 'latitude', "longitude"))
##Separate the species column into latin and common name columns.
sf_trees <- sf_trees %>%
separate(species, sep = "::", remove = FALSE, into = c('species_lat', 'species_nor'))
sf_trees$species_nor <- as.factor(df_trees$species_nor)
##map of recommended species per  (https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf) :
recommended_sp <- c(' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum', ' Flowering Cherry',
' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush', ' Hybrid Strawberry Tree',
' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm', ' Fruitless Olive', ' Chilean Soapbark',
" Small-leaf Tristania 'Elegant'", ' Chinese Pistache', ' Trident Maple', ' Chinese Elm', ' Cork Oak',
' Ginkgo: Autumn Gold', ' Fairmont Ginkgo', ' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
)
df_trees_recommended <- sf_trees %>%
filter(species_nor %in% recommended_sp)
##map center
mlong = -122.4446
mlat  = 37.72
pal <- colorFactor('Paired', domain = recommended_sp)
##Define the UI
ui = fluidPage(
titlePanel("Recommended Tree Species of San Francisco"),  ##App title
#tabPanel(a(href='https://sfenvironment.org/sites/default/files/fliers/files/sf_tree_guide.pdf', 'Source')),
sidebarLayout(          ##Sidebar layout with input and output definitions
sidebarPanel(         ##Sidebar panel for input
checkboxGroupInput(inputId = "species", #name of the input, widget
label = "Choose a species:",
choices = c('All Species',  ' Japanese Blueberry Tree', ' Flaxleaf Paperbark', ' Red Flowering Gum',
' Flowering Cherry', ' Little Gem Magnolia', ' Southern Magnolia', ' Weeping Bottlebrush',
' Hybrid Strawberry Tree', ' Primrose Tree', ' Brisbane Box', ' Mediterranean Fan Palm',
' Fruitless Olive', ' Chilean Soapbark', " Small-leaf Tristania 'Elegant'", ' Chinese Pistache',
' Trident Maple', ' Chinese Elm', ' Cork Oak', ' Ginkgo: Autumn Gold', ' Fairmont Ginkgo',
' Ginkgo: Saratoga', ' Autumn Sentinel Ginkgo'
),
selected = ' Japanese Blueberry Tree'
)),
mainPanel(             ##Main panel for displaying outputs
tags$style(type = "text/css",                   ##Hide errors
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
leafletOutput("map", height = 800)    ##Output: interactive leaflet map
)
)
)
server = function(input, output) {        ##Define the server
filteredData <- reactive({
if (input$species == "All Species") {
df_trees_recommended
} else {
filter(df_trees_recommended, species_nor == input$species)
}
})
output$map <- renderLeaflet({
leaflet(filteredData(),
width = '100%',
options = leafletOptions(minZoom = 9, maxZoom = 18)) %>%
addTiles() %>%
setView(lng = mlong, lat = mlat, zoom = 12) %>%
addCircleMarkers(lng = filteredData()$longitude,
lat = filteredData()$latitude,
popup = filteredData()$species_nor,
color = ~pal(filteredData()$species_nor),
label = ~species_nor,
radius = 4,
fillOpacity = 0.99)
})
}
shinyApp(ui, server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='C3fKWL0cSBL+cHYdxwucvh+lIcHE8S1B9q/6+zyV')
#install.packages('dplyr')
library(dplyr)
#install.packages('lubridate')
library(lubridate)
#install.packages('tidyr')
library(tidyr)
#install.packages('ggplot2')
library(ggplot2)
library(tidyverse)
#install.packages('gganimate')
library(gganimate)
#install.packages('gifski')
library(gifski)
#install.packages('av')
library(av)
#install.packages('ggmap')
library(ggmap)
#install.packages('shiny')
library(shiny)
#install.packages('leaflet')
library(leaflet)
df_trees_merge %>% filter(percent.missing==1) %>% select(ntotal) %>%
sum()
df_trees_merge %>%
ggplot(aes(percent.missing)) + geom_histogram(fill='skyblue4') +
labs(title='Percentage of Missing Date Values per Species') +
xlab('Percentage of missing date') + ylab('Count') +
scale_x_continuous(breaks=seq(0,1, .10)) +theme_minimal()
df_trees_merge %>% filter(ntotal>100) %>%
ggplot(aes(percent.missing))+geom_histogram(fill='skyblue4') +
labs(title='Percentage of Missing Date Values per Species') +
xlab('Percentage of missing date') + ylab('Count') +
scale_x_continuous(breaks=seq(0,1, .10)) + theme_minimal()
df_trees_merge %>%
ggplot(aes(percent.missing)) + geom_histogram(fill='skyblue4') +
labs(title='Percentage of Missing Date Values per Species') +
xlab('Percentage of missing date') + ylab('Count') +
scale_x_continuous(breaks=seq(0,1, .10)) +theme_minimal()
df_trees_merge %>% filter(ntotal>100) %>%
ggplot(aes(percent.missing))+geom_histogram(fill='skyblue4') +
labs(title='Percentage of Missing Date Values per Species') +
xlab('Percentage of missing date') + ylab('Count') +
scale_x_continuous(breaks=seq(0,1, .10)) + theme_minimal()
df_trees %>%
select(year)%>%
quantile(na.rm = TRUE)
df_trees <- df_trees %>%
mutate(age = year(Sys.Date())-year)
hist(df_trees$age, main = 'Tree Age Distribution', xlab = 'Age', col = 'royalblue2') # using base r
df_trees <- df_trees %>%
mutate(age = year(Sys.Date())-year)
hist(df_trees$age, main = 'Tree Age Distribution', xlab = 'Age', col = 'skyblue4') # using base r
df_trees %>%
count(species_lat) %>%
arrange(desc(n)) %>%
top_n(n = 20)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
head()
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 20)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 20)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
?summarize
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat), na.rm=TRUE) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat, na.rm = TRUE)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
summarize(n = n_distinct(species_lat, na.rm = FALSE)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
summarise(n = n_distinct(species_lat, na.rm = TRUE)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
?na.omit
df_trees %>%
group_by(address) %>%
na.omit(address)
summarise(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
na.omit(cols = 'address') %>%
summarise(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
group_by(address) %>%
#na.omit(cols = 'address') %>%
summarise(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
na.omit(cols = 'address') %>%
group_by(address) %>%
summarise(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees %>%
filter(address != 'NA') %>%
group_by(address) %>%
summarise(n = n_distinct(species_lat)) %>%
arrange(desc(n)) %>%
top_n(n = 10)
df_trees_hasdate <- df_trees %>%
filter(!is.na(date)) %>%
select(c("tree_id", "species_lat", "year"))
str(df_trees_hasdate)
df_trees_hasdate$species_lat <- as.factor(df_trees_hasdate$species_lat)
unique(df_trees_hasdate[grep(df_trees_hasdate$species_lat, pattern = "^Acacia", ignore.case = TRUE), 'species_lat'])
unique(df_trees_hasdate[grep(df_trees_hasdate$species_lat, pattern = "^Magnolia", ignore.case = TRUE), 'species_lat'])
df_trees_hasdate <- df_trees_hasdate %>%
separate(species_lat, sep = " ", remove = FALSE, into = c('species_first', 'species_second', 'species_third'))
length(unique(df_trees_hasdate$species_first))
df_trees_hasdate_tidy <- df_trees_hasdate %>%
group_by(year) %>%
count(species_first) %>%
arrange(year, desc(n))
df_trees_hasdate_tidy %>%
select(c('year', 'n')) %>%
aggregate(by = list(df_trees_hasdate_tidy$year), FUN='sum') %>%
ggplot(aes(x = Group.1, y = n)) +
geom_line() +
labs(title = 'Total Number of Planted Trees per Year',
x = 'Year', y = 'Total number of planted trees') +
theme_minimal()
runApp(app)
runApp('GitHub/rbootcamp')
rsconnect::deployApp('./')
runApp('GitHub/rbootcamp')
rsconnect::setAccountInfo(name='gokcergun',
token='0B6A70785F6D89E90875A31086A612CA',
secret='C3fKWL0cSBL+cHYdxwucvh+lIcHE8S1B9q/6+zyV')
getwd()
setwd("C:/Users/gokce/Documents/GitHub/rbootcamp")
library(rsconnect)
deployApp('C:/Users/gokce/Documents/GitHub/rbootcamp')
